{"{":"lol","x":"3","structbuffer":"{switch;{args;1};set;{regexreplace;{if;!=;{regexreplace;{args;2};/\"/g;''};;{if;==;-1;{indexof;{args;0};{regexreplace;{args;2};/\"/g;''}};{args;0}{regexreplace;{args;2};/\"/g;''}\"{regexreplace;{args;3};/\"/g;''}\";{regexreplace;{args;0};/({regexreplace;{args;2};/\"/g;''})\"[^\"]*\"/;$1\"{regexreplace;{args;3};/\"/g;''}\"}};{args;0}};/[^\"]+\"\"/g};get;{if;!=;;{regexreplace;{args;2};/\"/g;''};{if;==;{indexof;{args;0};{regexreplace;{args;2};/\"/g;''}};-1;{args;4};{regexreplace;{regexreplace;{args;0};/^(?:[^\"]+\"[^\"]*\")*{regexreplace;{args;2};/\"/g;''}\"([^\"]*)\".*$/;$1};/''/g;\"}};{args;3}};{args;0}}","test":"6","321337187109175306ck":"1","309311003303215108ck":"1","299959543822024704ck":"1","172002275412279296ck":"1","lol":"true","`User not found`plus":"0","259340102545702912plus":"0","321337187109175306plus":"1","145246236608299008plus":"1","help::":"```asciidoc\n[Welcome to Novæ Tags tutorial]\n\n* What is 'tags' ? \n'tags' is a way to make customized commands, with customized answers depending on who uses them and who creates them!\n\n* How do we use that command ?\nYou have to create a tag like so: `nnt create <tagName> <code>' where 'tagName' is the name you'll call your tag with, and 'code' any other argument in the command that will shows up when you call the tag, then you can execute your new command like so: `nnt <tagName> <arguments>' where 'arguments' will be used as an input for your custom command!\n\n* Okay, so whatever I write after `nnt create mytag' will be displayed, then what's the difference with a `say' command?\nIt exists a huge set of functions you can use in different ways depending on what you give them as parameters, they perform action instead of just being displayed, they are delimited with `Invalid tag name`\nto illustrate those words: `nnt create mytag {username}' when run will display your name!\n```","help:options":"```asciidoc\noptions\n-----------------\n* `nnt help' gets you the basic view\n* `nnt help list' returns the list of functions you can use\n* `nnt help <functionName>' gets you more information on a function\n```","help::list":"```asciidoc\n[Novæ Tags: available functions]```\n`​aget`​** | **`​anslen`​** | **`​answer`​** | **`​args`​** | **`​argslen`​** | **`​aset`​** | **`​avars`​** | **`​base`​** | **`​channelid`​** | **`​channelname`​** | **`​channeltopic`\n`​comment`​** | **`​count`​** | **`​decr`​** | **`​exec`​** | **`​expr`​** | **`​get`​** | **`​i`​** | **`​if`​** | **`​incr`​** | **`​indexof`​** | **`​inject`​\n`​lastindexof`​** | **`​lb`​** | **`​length`​** | **`​loop`​** | **`​lower`​** | **`​nl`​** | **`​randarg`​** | **`​randcase`​** | **`​randchoice`​** | **`​randint`​** | **`​randstr`​\n`​randuser`​** | **`​rb`​** | **`​regexreplace`​** | **`​repeat`​** | **`​reverse`​** | **`​semi`​** | **`​serverid`​** | **`​servername`​** | **`​serverusers`​** | **`​set`​** | **`​shuffle`​\n`​sort`​** | **`​space`​** | **`​substr`​** | **`​switch`​** | **`​time`​** | **`​upper`​** | **`​userid`​** | **`​username`​** | **`​usernick`​** | **`​vars`​** | **`​wait`​","help::aget":"```asciidoc\nTag:: aget\nType:: Variable\nDescription:: gets the content of an author variable, or gets the provided default value\nStructure:: {aget;<varName>;<?default>}\nInput:: {aget;pi;3}\nOuput:: 3.14```","help::aset":"```asciidoc\nTag:: aset\nType:: Variable\nDescription:: sets the content of an author variable, deletes the variable if value is empty\nStructure:: {aset;<varName>;<?value>}\nInput:: {aset;name;Kio}\nOuput:: ```","help::avars":"```asciidoc\nTag:: avars\nType:: Variable\nDescription:: gets how many variables the author has, or returns the variable name at specified index\nStructure:: {avars;<?index>}\nInput:: {avars;0}\nOuput:: pi```","help::vars":"```asciidoc\nTag:: vars\nType:: Variable\nDescription:: gets how many variables the tag has, or returns this variable name at specified index\nStructure:: {vars;<?index>}\nInput:: {vars}\nOuput:: 0```","help::get":"```asciidoc\nTag:: get\nType:: Variable\nDescription:: gets the content of a tag variable, or gets the provided default value\nStructure:: {get;<varName>;<?default>}\nInput:: {get;cashprize}\nOuput:: 500```","help::set":"```asciidoc\nTag:: set\nType:: Variable\nDescription:: sets the content of a tag variable, deletes the variable if value is empty\nStructure:: {set;<varName>;<?value>}\nInput:: {set;cashprize;3000}\nOuput:: ```","help::lb":"```asciidoc\nTag:: lb\nType:: Escape\nDescription:: returns a {\nStructure:: {lb}\nInput:: {lb}\nOuput:: {```","help::rb":"```asciidoc\nTag:: rb\nType:: Escape\nDescription:: returns a }\nStructure:: {rb}\nInput:: {rb}\nOuput:: }```","help::nl":"```asciidoc\nTag:: nl\nType:: Escape\nDescription:: returns a carriage return\nStructure:: {nl}\nInput:: {nl}\nOuput:: (how am I supposed to print a carriage return here? lol)```","help::semi":"```asciidoc\nTag:: semi\nType:: Escape\nDescription:: returns a semicolon\nStructure:: {semi}\nInput:: {semi}\nOuput:: ;```","help::space":"```asciidoc\nTag:: space\nType:: Escape\nDescription:: returns one or many spaces\nStructure:: {space}\nInput:: {space;3}\nOuput:: (how am I supposed to print a space here? lol)```","help::argslen":"```asciidoc\nTag:: argslen\nType:: Input\nDescription:: returns how many arguments the tag got before executing\nStructure:: {argslen}\nInput:: {argslen}\nOuput:: 3```","help::args":"```asciidoc\nTag:: args\nType:: Input\nDescription:: returns a part of the args depending on the indexes, not providing them means getting all of them, not providingthe second index means only got the argument at the first index\nStructure:: {args;<?firstIndex>;<?lastIndex>}\nInput:: {args;1}\nOuput:: World```","help::length":"```asciidoc\nTag:: length\nType:: String\nDescription:: gets the length of a string\nStructure:: {length;<string>}\nInput:: {length;this is a string}\nOuput:: 16```","help::lower":"```asciidoc\nTag:: lower\nType:: String\nDescription:: returns a lowercase string based on the provided one\nStructure:: {lower;<string>}\nInput:: {lower;ThIs A StrinG}\nOuput:: this is a string```","help::upper":"```asciidoc\nTag:: upper\nType:: String\nDescription:: returns a uppercase string based on the provided one\nStructure:: {upper;<string>}\nInput:: {upper;ThIs A StrinG}\nOuput:: THIS IS A STRING```","help::substr":"```asciidoc\nTag:: substr\nType:: String\nDescription:: returns a substring of the provided string, default value of length is the string length\nStructure:: {substr;<string>;<index>;<?length>}\nInput:: {substr;Hello World;2;2}\nOuput:: lo```","help::if":"```asciidoc\nTag:: if\nType:: Conditional\nDescription:: performs a comparison in order to execute either true statement either false statement, valid operators are: <= >= == === || && !=\nStructure:: {if;<operator>;<leftSideComparison>;<rightSideComparison>;<whenTrue>;<whenFalse>}\nInput:: {if;==;1;01;yes;no}\nOuput:: yes```","help::inject":"```asciidoc\nTag:: inject\nType:: Process\nDescription:: runs a code after being run, inject cant be nested in another inject\nStructure:: {inject;<code>}\nInput:: {inject;{lb}}\nOuput:: {```","help::userid":"```asciidoc\nTag:: userid\nType:: User\nDescription:: gets the userid from a provided string (eg: a mention) or the user userid when arguments are empty\nStructure:: {userid;<?query>}\nInput:: {userid}\nOuput:: 321337187109175306```","help::username":"```asciidoc\nTag:: username\nType:: User\nDescription:: returns the username of an user in the provided string (eg: a mention) or the user username when arguments are empty\nStructure:: {username;<?query>}\nInput:: {username}\nOuput:: Novæ```","help::usernick":"```asciidoc\nTag:: usernick\nType:: User\nDescription:: returns the nickname of an user in the provided string (eg: a mention) or the user nickname when arguments are empty, when the user doesnt use a nickname, it returns the username\nStructure:: {usernick;<?query>}\nInput:: {usernick}\nOuput:: Novæ```","help::switch":"```asciidoc\nTag:: switch\nType:: Conditional\nDescription:: Performs a switch on a provided string, there is no limit on case amount\nStructure:: {switch;<string>;<case1>;<action1>;<case2>;<action2>;<?default>}\nInput:: {switch;3;1;one;2;two;3;three;not listed}\nOuput:: three```","help::base":"```asciidoc\nTag:: base\nType:: Number\nDescription:: converts a number from a base to another\nStructure:: {base;<number>;<baseFrom>;<?baseTo>}\nInput:: {basef;36;10}\nOuput:: 15```","help::randint":"```asciidoc\nTag:: randint\nType:: Randomizer\nDescription:: returns a random integer between minimal bound (included) and maximal bound (excluded), default bounds are 0 and 10\nStructure:: {randint;<?minimalBound>;<?maximalBound>}\nInput:: {randint}\nOuput:: 5```","help::randchoice":"```asciidoc\nTag:: randchoice\nType:: Randomizer\nDescription:: randomly returns one of the arguments\nStructure:: {randchoice;<?choice1>;<?choice2>;...}\nInput:: {randchoice;apple;pear;peach;banana}\nOuput:: peach```","help::randstr":"```asciidoc\nTag:: randstr\nType:: Randomizer\nDescription:: generates a string by randomly picking letters from the string\nStructure:: {randstr;<string>;<?times>}\nInput:: {randstr;abcde;7}\nOuput:: eacdbec```","help::randarg":"```asciidoc\nTag:: randarg\nType:: Randomizer\nDescription:: randomly returns on of the arguments\nStructure:: {randarg}\nInput:: {randarg}\nOuput:: ```","help::channelid":"```asciidoc\nTag:: channelid\nType:: Channel\nDescription:: gets the channel id\nStructure:: {channelid}\nInput:: {channelid}\nOuput:: 448097754942799873```","help::channelname":"```asciidoc\nTag:: channelname\nType:: Channel\nDescription:: gets the channel name\nStructure:: {channelname}\nInput:: {channelname}\nOuput:: tag-writing```","help::serverid":"```asciidoc\nTag:: serverid\nType:: Server\nDescription:: gets the server id\nStructure:: {serverid}\nInput:: {serverid}\nOuput:: 448096613890654230```","help::servername":"```asciidoc\nTag:: servername\nType:: Server\nDescription:: gets the server name\nStructure:: {servername}\nInput:: {servername}\nOuput:: Novæ Universe```","help::serverusers":"```asciidoc\nTag:: serverusers\nType:: Server\nDescription:: returns how many users are in the server\nStructure:: {serverusers}\nInput:: {serverusers}\nOuput:: 16```","help::randuser":"```asciidoc\nTag:: randuser\nType:: Randomizer\nDescription:: randomly gets the id of one of the members\nStructure:: {randuser}\nInput:: {randuser}\nOuput:: 264395784089239562```","help::sort":"```asciidoc\nTag:: sort\nType:: Number\nDescription:: sorts the numbers by spliting the string depending on the separator, default separator is a space\nStructure:: {sort;<string>;<?separator>}\nInput:: {sort;10 16 lol -2 3}\nOuput:: -2 3 10 16 lol```","help::randcase":"```asciidoc\nTag:: randcase\nType:: Randomizer\nDescription:: randomly decides the case of each letter and returns the changed string\nStructure:: {randcase;<string>}\nInput:: {randcase;}\nOuput:: ThIs A StrinG```","help::regexreplace":"```asciidoc\nTag:: regexreplace\nType:: String\nDescription:: performs replacements on the string, using a regular expression (see javascript regexp for further information)\nStructure:: {regexreplace;<StringFrom>;<regexp>;<?StringTo>}\nInput:: {regexreplace;Hello World!;/[^a-z]/gi;#}\nOuput:: Hello#World#```","help::channeltopic":"```asciidoc\nTag:: channeltopic\nType:: Channel\nDescription:: returns the channel topic\nStructure:: {channeltopic}\nInput:: {channeltopic}\nOuput:: create your tags here!```","help::repeat":"```asciidoc\nTag:: repeat\nType:: String\nDescription:: reproduces the same given string\nStructure:: {repeat;<string>;<?times>}\nInput:: {repeat;abc;4}\nOuput:: abcabcabcabc```","help::reverse":"```asciidoc\nTag:: reverse\nType:: String\nDescription:: reverses the string\nStructure:: {reverse;<string>}\nInput:: {reverse;abc}\nOuput:: cba```","help::shuffle":"```asciidoc\nTag:: shuffle\nType:: String\nDescription:: returns the string after shuffling the letters\nStructure:: {shuffle;<string>}\nInput:: {shuffle;this is a string}\nOuput:: a igt sitnssir h```","help::indexof":"```asciidoc\nTag:: indexof\nType:: String\nDescription:: returns the index of the first occurence of a matched string\nStructure:: {indexof;<string>;<matchString>}\nInput:: {indexof;this is a string;is}\nOuput:: 2```","help::lastindexof":"```asciidoc\nTag:: lastindexof\nType:: String\nDescription:: returns the index of the last occurence of a matched string\nStructure:: {lastindexof;<string>;<matchString>}\nInput:: {lastindexof;this is a string;is}\nOuput:: 5```","help::i":"```asciidoc\nTag:: i\nType:: Process\nDescription:: gets the current index in loop\nStructure:: {i;<?depth>}\nInput:: {i}\nOuput:: 13```","help::loop":"```asciidoc\nTag:: loop\nType:: Process\nDescription:: runs multiple times the same code with different index\nStructure:: {loop;<firstIndex>;<times>;<code>;<?separator>}\nInput:: {loop;0;3;{i};x}\nOuput:: 0x1x2x3x4x5x6x```","help::incr":"```asciidoc\nTag:: incr\nType:: Number\nDescription:: increases the number\nStructure:: {incr;<number>;<?step}\nInput:: {incr;13;3}\nOuput:: 16```","help::decr":"```asciidoc\nTag:: decr\nType:: Number\nDescription:: decreases the number\nStructure:: {decr;<number>;<?step}\nInput:: {decr;13;3}\nOuput:: 10```","help::count":"```asciidoc\nTag:: count\nType:: String\nDescription:: counts how many occurences of a matching string a string contains\nStructure:: {count;<string>;<?separator>}\nInput:: {count;this is a string;i}\nOuput:: 3```","help::time":"```asciidoc\nTag:: time\nType:: Process\nDescription:: returns the time in different timestamps format and at different dates\nStructure:: {time;<?format>;<?timestamp>}\nInput:: {time}\nOuput:: 1527116674714```","help::wait":"```asciidoc\nTag:: wait\nType:: Process\nDescription:: ask the user for an answer (or cancel it in 30s)\nStructure:: {wait;<codeWhenAnswering>;<codeWhenNotAnswering>}\nInput:: hello{wait;how are you?;you didnt reply...}\nOuput1:: hello\nOutput2:: how are you?```","help::expr":"```asciidoc\nTag:: expr\nType:: Process\nDescription:: performs calculation with every javascript operator (binary, maths, unary...)\nStructure:: {expr;<expr>}\nInput:: {expr;pow(3,2)+4}\nOuput:: 13```","help::answer":"```asciidoc\nTag:: answer\nType:: Input\nDescription:: works the same way args works, but with the result of a wait\nStructure:: {answer;<?firstIndex>;<?lastIndex>}\nInput:: {answer}\nOuput:: ```","help::anslen":"```asciidoc\nTag:: anslen\nType:: Input\nDescription:: works the same way argslen works, but with the result of a wait\nStructure:: {anslen}\nInput:: {anslen}\nOuput:: 3```","help::exec":"```asciidoc\nTag:: exec\nType:: Process\nDescription:: runs another tag\nStructure:: {exec;<tagName>;<argument1>;...}\nInput:: {exec;mytag}\nOuput:: hello Kio#9999```","help::comment":"```asciidoc\nTag:: comment\nType:: Escape\nDescription:: returns nothing, it just eats what you write in, it's supposed to comment your raw code\nStructure:: {comment}\nInput:: {comment}\nOuput:: ```","help:err":"```asciidoc\n[Error: this isnt a recognized function]```"}